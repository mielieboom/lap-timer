{"version":3,"sources":["index.js"],"names":["Counter","props","className","onClick","handler","onTouchEnd","count","TimeInfo","name","millisToString","duration","TimeList","history","fastest_lap","arr","min_value","Number","MAX_SAFE_INTEGER","min_index","i","length","console","log","minIndex","map","v","cls","key","reverse","StartStop","is_running","text","days","Math","floor","hours","minutes","to","seconds","toFixed","result","App","handleStartStop","now","Date","state","setState","prev_event_time","current_time","handleClick","delta_time","prev_time","start_time","concat","this","intervalID","setInterval","tick","clearInterval","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30d48dfb.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst click_time_tol = 100;\n\nconst minIndex = (arr) => {\n  let min_value = Number.MAX_SAFE_INTEGER;\n  let min_index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= min_value) {\n      min_value = arr[i];\n      min_index = i;\n    }\n  }\n\n  console.log(\"minIndex => \", min_index, min_value);\n  return min_index;\n};\n\nfunction Counter(props) {\n  return (\n    <button\n      className=\"count-block\"\n      onClick={() => props.handler()}\n      onTouchEnd={() => props.handler()}\n    >\n      {props.count || \"GO\"}\n    </button>\n  );\n}\n\nfunction TimeInfo(props) {\n  return (\n    <div className=\"time-block\">\n      {props.name}: {millisToString(props.duration)}\n    </div>\n  );\n}\n\nfunction TimeList(props) {\n  const { history } = props;\n  const fastest_lap = minIndex(history);\n\n  return history\n    .map((v, i) => {\n      const cls = i === fastest_lap ? \"fastest-block\" : \"time-block\";\n\n      return (\n        <div className={cls} key={i}>\n          {i + 1} - {millisToString(v)}\n        </div>\n      );\n    })\n    .reverse();\n}\n\nfunction StartStop(props) {\n  const { handler, is_running } = props;\n  const [cls, text] = is_running\n    ? [\"fastest-block\", \"STOP\"]\n    : [\"info-block\", \"RESUME\"];\n\n  return (\n    <button className={cls} onClick={handler}>\n      {text}\n    </button>\n  );\n}\n\nconst millisToString = (duration) => {\n  const millis_t = 1;\n  const seconds_t = 1000 * millis_t;\n  const minutes_t = 60 * seconds_t;\n  const hours_t = 60 * minutes_t;\n  const days_t = 24 * hours_t;\n\n  const days = Math.floor(duration / days_t);\n  const hours = Math.floor((duration % days_t) / hours_t);\n  const minutes = Math.floor((duration % hours_t) / minutes_t).to;\n  const seconds = ((duration % minutes_t) / seconds_t).toFixed(3);\n\n  let result = `${minutes || 0}m ${seconds}s`;\n  result = hours ? `${hours}h ` + result : result;\n  result = days ? `${days}d ` + result : result;\n\n  return result;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: null,\n      prev_time: null,\n      count: null,\n      current_time: Date.now(),\n      prev_event_time: Date.now(),\n      is_running: false,\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick() {\n    const { is_running } = this.state;\n    if (is_running) {\n      this.setState({\n        ...this.state,\n        current_time: Date.now(),\n      });\n    }\n  }\n\n  handleStartStop = () => {\n    const now = Date.now();\n    if (this.state.is_running) {\n      this.setState({\n        ...this.setState,\n        is_running: !this.state.is_running,\n      });\n    } else {\n      this.setState({\n        ...this.setState,\n        is_running: !this.state.is_running,\n        prev_event_time: now,\n        current_time: now,\n      });\n    }\n  };\n\n  handleClick = () => {\n    const { prev_event_time, is_running, count, history } = this.state;\n    const now = Date.now();\n    const delta_time = now - prev_event_time;\n\n    if (!is_running && count != null) {\n      this.handleStartStop();\n      return;\n    }\n\n    if (delta_time < click_time_tol) {\n      return; // debounce double events like onTouchUp and onClick\n    }\n\n    if (count === null) {\n      // first click\n      this.setState({\n        ...this.state,\n        history: [],\n        count: 1,\n        prev_time: now,\n        prev_event_time: now,\n        current_time: now,\n        start_time: now,\n        is_running: true,\n      });\n    } else {\n      this.setState({\n        ...this.state,\n        history: history.concat([delta_time]), //[...history, squares],\n        count: count + 1,\n        prev_time: now,\n        prev_event_time: now,\n        current_time: now,\n      });\n    }\n  };\n\n  render() {\n    if (this.state.count === null) {\n      return (\n        <button onClick={this.handleClick} className=\"count-block\">\n          {\"GO\"}\n        </button>\n      );\n    }\n\n    const {\n      history,\n      current_time,\n      start_time,\n      prev_event_time,\n      is_running,\n    } = this.state;\n\n    return (\n      <div>\n        <Counter count={this.state.count} handler={this.handleClick} />\n        <StartStop is_running={is_running} handler={this.handleStartStop} />\n        <TimeInfo name={\"TOTAL\"} duration={current_time - start_time} />\n        <TimeInfo name={\"CURRENT\"} duration={current_time - prev_event_time} />\n        <TimeList history={history} />\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}